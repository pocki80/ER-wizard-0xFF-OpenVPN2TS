#!/bin/bash
#
# EdgeMAX Wizard "ER-wizard-0xFF-OpenVPN2TS" created 03/2018 by CPO/BMK for FunkFeuer.at
# Version 20180216
# ^-- previous line is used from bmk-webstatus-package as version identification, dont remove "Version "
# Shortform: 0xFF-OpenVPN2TS
#
# Github repository: https://github.com/pocki80/ER-wizard-0xFF-OpenVPN2TS
#
# Works on all EdgeRouter and EdgePoint Devices (system version 1.9.7+)
#

ACTION=$1
INPUT=$2

cfgusrdir="/config/user-data/"
log="/var/log/0xffopenvpn.log"

tunnelserverip="78.41.115.16"
tunneldevice="vtun0"
openvpnconfig="/config/user-data/funkfeuer.ovpn"
openvpnsecret="/config/user-data/funkfeuer.secret"
openvpnifupdown="/config/user-data/funkfeuer-ifupdown.sh"


#define update sources on github
gitowner="pocki80"
gitrepo="ER-wizard-0xFF-OpenVPN2TS"
gitbranch="master"

# hosts to check for online status
v4iphost='8.8.8.8'
v4dnshost='www.google.com'
v6iphost='2001:4860:4860::8888'
v6dnshost='www.google.com'


#
# DO NOT EDIT BELOW HERE !
#

##checks
#numbers only
re='^[0-9]+$'


echo "EdgeMAX ER-wizard-0xFF-OpenVPN2TS Wizard started $(date +%Y-%m-%d/%H:%M:%S.%N) Session="$$ >>$log

#base64begin 
# !dont edit or remove this comment!
echo "Installation procedure..." >>$log

if [ ! -f $openvpnconfig ]; then
  echo "Create file $openvpnconfig..." >>$log
  cat    >$openvpnconfig 2>>$log <<ENDSCRIPTINSTALL
dev             $tunneldevice
dev-type        tap
proto           udp
remote          $tunnelserverip
port            5999
#daemon          $tunneldevice
up-delay
down-pre
up-restart
comp-lzo
script-security 2
nobind
ping 10
ping-restart 60
ping-timer-rem
fast-io
sndbuf  524288 
rcvbuf  524288
mute 2
verb 1
#up "$openvpnifupdown"
#down "$openvpnifupdown"
#secret $openvpnsecret
#auth SHA256
#cipher none
ENDSCRIPTINSTALL
fi
  
if [ ! -f $openvpnifupdown ]; then
  echo "Create file $openvpnifupdown..." >>$log
  cat    >$openvpnifupdown 2>>$log <<'ENDSCRIPTINSTALL'
#!/bin/sh
logger "$dev $script_type"
case "$1" in
       silent)
               br="br9"
       ;;
       ether)
               br="br8"
       ;;
       *)
               br="br7"
esac
case "$script_type" in
       up)
               /sbin/brctl addif $br $dev
               /sbin/ip link set $br promisc on
               /sbin/ip link set $dev up
       ;;
       down)
               /sbin/ip link set $dev down 
               /sbin/ip link set $br promisc off
               /sbin/brctl delif $br $dev

       ;;
       *)
esac
exit 0
ENDSCRIPTINSTALL
  chmod 755 $openvpnifupdown >>$log 2>>$log
fi

#check if there's at least one bridge between br2 andf br9, create br9 if not any
if [ $(ls /opt/vyatta/config/active/interfaces/bridge | grep -vwE "br0|br1" | grep -cE "br.") -eq 0 ]; then
    echo "create br9 on install" >>$log
    commandlist[${#commandlist[@]}]="set interfaces bridge br9"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 aging 300"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 bridged-conntrack disable"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 description TUNNEL"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 hello-time 2"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 max-age 20"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 priority 32768"
    commandlist[${#commandlist[@]}]="set interfaces bridge br9 stp false"
    cmd="/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper"
    tfile=$(mktemp)
(
$cmd begin
ret=0
for executecmd in "${commandlist[@]}"; do
    if [ $ret == 0 ]; then
        echo "--"$executecmd >>$log
        $cmd $executecmd || ret=1
    else
        echo "--skipped: "$executecmd >>$log
    fi
done
[ $ret == 0 ] && $cmd commit || ret=1
[ $ret == 0 ] && $cmd save || ret=1
$cmd end
exit $ret
) >$tfile 2>&1
    ret=$?
    output=$(cat $tfile)
    rm -f $tfile
    echo "${output}" >> $log
    commandlist=[]
fi


# remove installtion block
sed -i '/^#base64begin/,/^#base64end$/d' $0
# !dont edit or remove this comment!
#base64end

# function to check if connectivity is given to download packages
onlinecheck () {
    ping="ping -c 1 -W 1 ";
    ping6="ping6 -c 1 -W 1 ";
    $ping $v4iphost >/dev/null 2>/dev/null
    if [[ $? == 0 ]]; then
        # ipv4 ok
        $ping6 $v6iphost >/dev/null 2>/dev/null
        if [[ $? == 0 ]]; then
            # ipv6 ok
            $ping6 $v6dnshost >/dev/null 2>/dev/null
            if [[ $? == 0 ]]; then
                # ipv6dns ok
                return 0
            else
                # ipv6dns not ok
                return 1
            fi
        else
            # ipv6 not ok, fallback to ipv4
            # issue: dns resolver prefers v6 (if ipv6 is configured)
            $ping $v4dnshost >/dev/null 2>/dev/null
            if [[ $? == 0 ]]; then
                # ipv4dns ok
                return 0
            else
                # ipv4dns not ok
                return 1
            fi
        fi
    else
        # ipv4 not ok
        return 1
    fi
}

# function called when you click the wizard
load () {
    echo "Load procedure..." >>$log

    if [ ! -f $openvpnconfig ]; then
        packagestatus='err: missing config file - reinstall this wizard!'
    else
        packagestatus='ok'
    fi

    ####### wizard version check against github
    # 
    olsrdwizard=""
    for i in $(find /config/wizard/feature/ -name wizard.html); do
        if [[ $(head $i -n 10 | grep 'ER-wizard-0xFF-OpenVPN2TS') ]]; then
            olsrdwizard=$i
            break
        fi
    done
    if [ ! $olsrdwizard ]; then
        updatetext="error: ER-wizard-0xFF-OpenVPN2TS wizard.html not found!" >>$log 2>>$log
    else
        CURRENTVERSION=$(head -n 8 $olsrdwizard | grep -i versioninfo= | awk -F"=" {'print $2'})
        if [ $((onlinecheck)) = 0 ]; then
            GITVERSION=$(curl -s --connect-timeout 2 --speed-time 2 https://raw.githubusercontent.com/$gitowner/$gitrepo/$gitbranch/wizard.html | head -n 8 | grep -i versioninfo= | awk -F"=" {'print $2'})
            if [ "$GITVERSION" ] && [ "$CURRENTVERSION" ]; then 
                if [ $(($GITVERSION)) \> $(($CURRENTVERSION)) ]; then 
                    updatetext="new version available: "$GITVERSION", current: "$CURRENTVERSION >>$log 2>>$log
                else
                    updatetext="current version "$CURRENTVERSION" is up-to-date" >>$log 2>>$log
                fi
            else
                updatetext="version info not available. git:"$GITVERSION", current: "$CURRENTVERSION"." >>$log 2>>$log
            fi
        else
            updatetext="version info not available. git:OFFLINE, current: "$CURRENTVERSION"." >>$log 2>>$log
        fi
    fi
    updatestatus=',"updatestatus":"'$updatetext'"'
    # end
    ####### wizard version check against github

    if [ -f /config/user-data/autoupdate.dat ] && [ "$(grep -i "wizard-openvpn2ts=yes" /config/user-data/autoupdate.dat | wc -l)" == "1" ]; then
        autoupdatefromgithub=',"autoupdatefromgithub":"on"'
    fi
    
    #get dev from config file
    tunneldevice=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^dev," | cut -d, -f2)
    if [[ "$tunneldevice" =~ vtun[0-9]{1,2} ]]; then
        #check for running openvpn using this vtun device
        currentvtunprocess=$(ps aux | grep -v grep | grep -E "/usr/sbin/openvpn .* /var/run/openvpn-$tunneldevice.pid .*" | awk '{print $2}')
        if [ "$currentvtunprocess" ]; then
            #find config file of this process
            currentvtunconfig=$(ps $currentvtunprocess | tail -1 | grep -oE "\-\-config [A-Za-z0-9~!#$%^&*()_+-/]* " | awk '{print $2}')
            #verify that this is our config file
            [ "$currentvtunconfig" == "$openvpnconfig" ] || packagestatus='err: openvpn@'$tunneldevice' using '$currentvtunconfig
        else
            currentvtunconfig=$openvpnconfig
            packagestatus='ok: openvpn for '$tunneldevice' not running'
        fi
    else
        packagestatus='err: wrong or missing dev parameter "'$tunneldevice'"'
    fi
    lastlogline=$(grep " openvpn\[" /var/log/messages | tail -1 | sed -e "s/$(hostname) openvpn\[.*\]: //")
    
    #get assigned bridge of vtun device
    bridge=$(cat /opt/vyatta/config/active/interfaces/openvpn/$tunneldevice/bridge-group/bridge/node.val 2>/dev/null)
    [ "$bridge" ] &&
      ipv4addr=$(ip -f inet addr | awk '/^[0-9]:*|inet/ { print $2 }' | sed ':a;N;$!ba;s/:\n/;/g' | grep -E "^$bridge" | cut -d";" -f2) ||
      packagestatus='err: '$tunneldevice' is not assigned to any bridge'
    
    #get local bridges
    brinterfaces=$(ls /opt/vyatta/config/active/interfaces/bridge)
    brlist='"bridge":{"options":["'$(echo $brinterfaces | sed 's/ /","/g')'"],"other":"false"}'
    [ "$brinterfaces" ] || packagestatus='err: no bridge interfaces found'

    #get portnumber from config file
    portnumber=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^port," | cut -d, -f2)

    #get tunnel and bridge up/down state
    tunnelupdown=$(ip -4 link | grep $tunneldevice":" | grep -oE "state UP |state DOWN " | cut -d" " -f2)
    bridgeupdown=$(ip -4 link | grep $bridge":" | grep -oE "state UP |state DOWN " | cut -d" " -f2)
    [ "$tunnelupdown" == "UP" ] && [ "$bridgeupdown" == "UP" ] && established="on"

    destination=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^remote," | cut -d, -f2)
    todestination=$(ip -4 r get $destination 2>/dev/null | head -1 | awk '{print $5","$3","$7}')
    int2dest=$(echo $todestination | cut -d"," -f1)
    gw2dest=$(echo $todestination | cut -d"," -f2)
    src2dest=$(echo $todestination | cut -d"," -f3)
    
    #ping-to-destination?
    ping="ping -c 1 -W 1 ";
    $ping $destination >/dev/null 2>/dev/null
    [[ $? == 0 ]] && destistate="ok" || destistate="err"
    
    #ping to web
    onlinecheck
    [[ $? == 0 ]] && onlinestate="ok" || onlinestate="err"

    #check for .secret
    secretfile=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^secret," | cut -d, -f2)
    [ "$secretfile" ] && [ -f $secretfile ] && [ $(stat -c %s $secretfile) -ge 300 ] && secreton="on"
    
    [ -f $openvpnsecret ] && secretfound="on"

    #possible gateway interfaces
    webinterfaces=$(ip -4 r | grep -oE "dev .{3,7} " | awk '!x[$2]++ {print $2}' | sort)
    gwlist='"int2dest":{"options":["'$(echo $webinterfaces | sed 's/ /","/g')'"],"other":"false"}'


    #static-route?
    staticto=$(find /opt/vyatta/config/active/protocols/static/route/*/next-hop/$gw2dest -maxdepth 0 | awk -F"/" '{gsub("%2F","/",$9); print $9}')
    [ "$staticto" ] && staticon="on"
    
    #extract openvpn-settings
    #sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot
    [ $(sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot | grep -cE "^        disable$") -eq 1 ] && disabled="on"
    [ $(sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot | grep -c "config-file $openvpnconfig") -eq 1 ] && configured="on"
    [ "$configured" ] && [ ! "$disabled" ] && tunnelenabled="on"

    # get all variables together for output
    packagestatus='"packagestatus":"'$packagestatus'"'
    echo -n "{\"success\":\"1\",\"data\":{ $packagestatus $autoupdatefromgithub $updatestatus"
    echo -n ",\"tunnelenabled\":\"$tunnelenabled\",\"established\":\"$established\",\"ipv4addr\":\"$ipv4addr\",\"bridge\":\"$bridge\""
    echo -n ",\"portnumber\":\"$portnumber\""
    echo -n ",\"lastlogline\":\"$lastlogline\""
    echo -n ",\"tunneldevice\":\"$tunneldevice\""
    echo -n ",\"destination\":\"$destination\""
    echo -n ",\"int2dest\":\"$int2dest\""
    echo -n ",\"gw2dest\":\"$gw2dest\""
    echo -n ",\"src2dest\":\"$src2dest\""
    echo -n ",\"destistate\":\"$destistate\""
    echo -n ",\"onlinestate\":\"$onlinestate\""
    echo -n ",\"staticto\":\"$staticto\""
    echo -n ",\"staticon\":\"$staticon\""
    echo -n ",\"secreton\":\"$secreton\""
    echo -n ",\"secretfound\":\"$secretfound\""
    echo -n ",\"currentvtunconfig\":\"$currentvtunconfig\""
    echo -n " },"
    echo    " \"definition\":{$brlist,$gwlist}}"
}

# function called when you click apply
apply () {
    ret=0
    echo "Apply procedure..." >>$log
    updatefromgithub=$(jq -M -r '.updatefromgithub' $INPUT)
    if [[ "$updatefromgithub" == "on" ]]; then
        echo "update from github requested" >>$log 2>>$log
        olsrdwizard=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep 'ER-wizard-0xFF-OpenVPN2TS') ]]; then
                olsrdwizard=$i
                break
            fi
        done
        if [ ! $olsrdwizard ]; then
            echo "error: ER-wizard-0xFF-OpenVPN2TS wizard.html not found!" >>$log 2>>$log
        elif [ $((onlinecheck)) != 0 ]; then
            echo "currently offline" >>$log 2>>$log
        else
            curl -s -o /tmp/ER-wizard.tar.gz --connect-timeout 2 --speed-time 2 https://codeload.github.com/$gitowner/$gitrepo/legacy.tar.gz/$gitbranch >>$log 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
              set $LINE
              if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
              [ -f "/tmp/"$LINE ] && [ $W == "1" ] && cp "/tmp/"$LINE $(dirname $olsrdwizard)"/"$(basename $LINE) >>$log 2>>$log
            done < /tmp/result.txt
            rm /tmp/result.txt >>$log 2>>$log
            rm -Rf /tmp/$gitowner-$gitrepo* >>$log 2>>$log
            chmod 755 $(dirname $olsrdwizard)"/"wizard-run >>$log 2>>$log
            $(dirname $olsrdwizard)"/"wizard-run load >>$log 2>>$log
        fi
    fi
    autoupdatefromgithub=$(jq -M -r '.autoupdatefromgithub' $INPUT)
    if [[ "$autoupdatefromgithub" == "on" ]]; then
        #check for auto-update wizard, install if not there!!
        wiz=""
        for i in $(find /config/wizard/feature/ -name wizard.html); do
            if [[ $(head $i -n 10 | grep "ER-wizard-AutoUpdate") ]]; then
                wiz=$i
                break
            fi
        done
        if [ ! $wiz ]; then 
            #autoupdate-wizard mit scripten fehlt: offline-install
            wiz="/config/wizard/feature/AutoUpdate/wizard.html"
            echo "Installing "$(dirname $wiz)"..." >>$log 2>>$log
            if [ ! -d $(dirname $wiz) ]; then 
                mkdir $(dirname $wiz) >>$log 2>>$log
                chmod --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
                chown --reference=$(dirname $olsrdwizard) $(dirname $wiz) >>$log 2>>$log
            fi
            #extract offline --> replaces download-procedure, Version 20181001, https://github.com/pocki80/ER-wizard-AutoUpdate
            echo "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
zfvr/rq//s3XH7wmIhIAcgAA

" | base64 -d >/tmp/ER-wizard.tar.gz 2>>$log
            tar   -xvzf /tmp/ER-wizard.tar.gz -C /tmp >/tmp/result.txt 2>>$log
            rm -f       /tmp/ER-wizard.tar.gz >>$log 2>>$log
            while read LINE; do
                set $LINE
                if [ $(basename $LINE) == "wizard-run" ] || [ $(basename $LINE) == "wizard.html" ] || [ $(basename $LINE) == "validator.json" ]; then W=1; else W=2; fi
                if [ -f "/tmp/"$LINE ] && [ $W == "1" ]; then
                    sudo cp "/tmp/"$LINE $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chmod --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                    sudo chown --reference=$(dirname $olsrdwizard)"/"$(basename $LINE) $(dirname $wiz)"/"$(basename $LINE) >>$log 2>>$log
                fi
            done < /tmp/result.txt
            rm /tmp/result.txt
            rm -Rf /tmp/$git2owner-$git2repo* >>$log 2>>$log
            chmod 755 $(dirname $wiz)"/"wizard-run >>$log 2>>$log
            echo "Installing done, now triggering initial load..." >>$log 2>>$log
            $(dirname $wiz)"/"wizard-run load  >>$log 2>>$log
        fi
        #remove "no" if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-openvpn2ts=no" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-openvpn2ts=no" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        fi
        if [ ! -f /config/user-data/autoupdate.dat ]; then
            #create settings file if missing
            echo 'wizard-openvpn2ts=yes' >/config/user-data/autoupdate.dat 2>>$log
            echo '' >>/config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
        else
            #add yes line if missing
            if [ "$(grep -i "wizard-openvpn2ts=yes" /config/user-data/autoupdate.dat |wc -l)" == "0" ]; then
                echo 'wizard-openvpn2ts=yes' >>/config/user-data/autoupdate.dat 2>>$log
                echo '' >>/config/user-data/autoupdate.dat 2>>$log
                sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            fi
        fi
    else
        #remove yes line if exists
        if [ -f /config/user-data/autoupdate.dat ] &&
           [ "$(grep -i "wizard-openvpn2ts=yes" /config/user-data/autoupdate.dat |wc -l)" == "1" ]; then
            linenumber=$(grep -ni "wizard-openvpn2ts=yes" /config/user-data/autoupdate.dat | awk -F: {'print $1'})
            sed -i $linenumber'd' /config/user-data/autoupdate.dat 2>>$log
            sed -i '/^$/d' /config/user-data/autoupdate.dat 2>>$log
            curl -so /dev/null --connect-timeout 2 --speed-time 2 "https://ff.cybercomm.at/aulog/logthis.php?w=off-openvpn2ts&r="$(hostname) >/dev/null 2>/dev/null
        fi
    fi
    # end
    ####### wizard manual update from github

    #reset daemon on user request
    resetopenvpnnow=$(jq -M -r '.resetopenvpnnow' $INPUT)
    if [ "$resetopenvpnnow" == "on" ]; then
        resetdaemon=1
    fi

    #check for .secret
    secretfile=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^secret," | cut -d, -f2)
    [ "$secretfile" ] && [ -f $secretfile ] && [ $(stat -c %s $secretfile) -ge 300 ] && secreton="on"
    secretonnew=$(jq -M -r '.secreton' $INPUT)
    
    #IMPROVE this regarding filename handling of secret-file
    if [ ! "$secreton" ] && [ "$secretonnew" == "on" ] && [ -f $openvpnsecret ] && [ $(stat -c %s $openvpnsecret) -ge 300 ]; then
        echo "Setting up secret file in ovpn config" >>$log
        #be careful with secret param
        sed -i "/^.*#.*secret /"'s/^.*#.*secret.*$/secret \/config\/user-data\/funkfeuer\.secret/' $openvpnconfig
        (grep -q "secret /config/user-data/funkfeuer.secret" $openvpnconfig) || echo "secret /config/user-data/funkfeuer.secret" >>$openvpnconfig
        #now auth and cipher
        sed -i "/^.*auth /"'s/^.*auth.*$/auth SHA256/' $openvpnconfig
        (grep -q "auth SHA256" $openvpnconfig) || echo "auth SHA256" >>$openvpnconfig
        sed -i "/^.*cipher /"'s/^.*cipher.*$/cipher none/' $openvpnconfig
        (grep -q "cipher none" $openvpnconfig) || echo "cipher none" >>$openvpnconfig
        resetdaemon=4
    elif [ "$secreton" ] && [ ! "$secretonnew" ]; then
        echo "Disable secret file in ovpn config" >>$log
        sed -i "/^secret /"'s/^/#/' $openvpnconfig
        sed -i "/^auth /"'s/^/#/' $openvpnconfig
        sed -i "/^cipher /"'s/^/#/' $openvpnconfig
        resetdaemon=5
    fi

    #get tunneldevice from config file
    tunneldevice=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^dev," | cut -d, -f2)
    
    ##only if not updating right now
    if [[ "$updatefromgithub" == "on" ]]; then
        resetdaemon=""
    else
        #be sure there is a config file before doing anything
        if [ ! -f $openvpnconfig ]; then
            ret=1
            output='missing config file - reinstall this wizard to fix it!'
        else
            #be sure the config file from a running process is matching the tunneldevice running it
            if [[ "$tunneldevice" =~ vtun[0-9]{1,2} ]]; then
                currentvtunprocess=$(ps aux | grep -v grep | grep -E "/usr/sbin/openvpn .* /var/run/openvpn-$tunneldevice.pid .*" | awk '{print $2}')
                if [ "$currentvtunprocess" ]; then
                    currentvtunconfig=$(ps $currentvtunprocess | tail -1 | grep -oE "\-\-config [A-Za-z0-9~!#$%^&*()_+-/]* " | awk '{print $2}')
                else
                    currentvtunconfig=$openvpnconfig
                fi
                if [ "$currentvtunconfig" == "$openvpnconfig" ]; then
                    runningok=1
                else
                    ret=1
                    output='openvpn@'$tunneldevice' using '$currentvtunconfig' - fix this manually before using this wizard!'
                fi
            else
                ret=1
                output='err: wrong or missing dev parameter in config file '$tunneldevice
            fi
        fi
    fi
    # end "if not updating"

    #get bridges
    bridge=$(cat /opt/vyatta/config/active/interfaces/openvpn/$tunneldevice/bridge-group/bridge/node.val 2>/dev/null)
    bridgenew=$(jq -M -r '.bridge' $INPUT)

    #prepare work for static route
    destination=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^remote," | cut -d, -f2)
    todestination=$(ip -4 r get $destination 2>/dev/null | head -1 | awk '{print $5","$3","$7}')
    int2dest=$(echo $todestination | cut -d"," -f1)
    gw2dest=$(echo $todestination | cut -d"," -f2)
    int2destnew=$(jq -M -r '.int2dest' $INPUT)
    
    #avoid gateway to be the opebvpn bridge
    [ "$int2destnew" ] && [ "$bridgenew" ] && [ "$int2destnew" == "$bridgenew" ] && int2destnew=$int2dest
    
    if [ "$int2dest" ] && [ "$int2destnew" ] && [ ! "$int2dest" == "$int2destnew" ]; then
        #user wants to change default interface for vpn-destination
        gw2destnew=$(ip -4 r | grep "dev $int2destnew " | grep "default via " | awk '{print $3}')
        staticsaved=$(find /opt/vyatta/config/active/protocols/static/route/$destination%2F32/next-hop/$gw2dest -maxdepth 0 | awk -F"/" '{print $11}')
        if [ "$staticsaved" ] && [ "$destination" ]; then
            echo "Removing statuc route $destination/32 via gw=$staticsaved" >>$log
            commandlist[${#commandlist[@]}]="delete protocols static route $destination/32"
        fi
        if [ "$gw2destnew" ] && [ "$destination" ]; then
            echo "Adding static route $destination/32 via new gw=$gw2destnew" >>$log
            commandlist[${#commandlist[@]}]="set protocols static route $destination/32 next-hop $gw2destnew description TunnelserverVPN"
        fi
    fi
    

    #get portnumber from config file
    portnumber=$(awk '{print $1","$2}' $openvpnconfig 2>/dev/null | cut -d'#' -f1 | grep -iE "^port," | cut -d, -f2)
    #get port number from user
    portnumbernew=$(jq -M -r '.portnumber' $INPUT)
    if [ "$portnumber" ] && [ "$portnumbernew" ] &&
       [[ $portnumber =~ $re ]] && [[ $portnumbernew =~ $re ]] && 
       [ $portnumbernew -ge 5000 ] && [ $portnumbernew -le 5999 ]; then
        if [ ! "$portnumber" == "$portnumbernew" ]; then
            #number is ok, change it
            echo "Changing Portnumber from $portnumber to $portnumbernew" >>$log
            linenumber=$(grep -niE "port.*$portnumber" $openvpnconfig | grep -viE ".*#.*port" | awk -F: {'print $1'})
            sed -i "$linenumber""s/$portnumber/$portnumbernew/" $openvpnconfig 2>/dev/null
            resetdaemon=2
        fi
    else
        ret=1
        output='portnumber error'
    fi
    
    #extract openvpn-settings
    #sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot
    
    #check bridge settings ## go for "old" tunneldevice!
    #get enabled state 
    tunnelenabled=$(jq -M -r '.tunnelenabled' $INPUT)
    tunneldevicenew=$(jq -M -r '.tunneldevice' $INPUT)
    if [ ! "$tunneldevicenew" ] || [[ ! "$tunneldevicenew" =~ vtun[0-9]{1,2} ]]; then
        ret=1
        output="error on tunneldevice - must be between vtun0..vtun99"
        tunneldevicenew="$tunneldevice"
    fi
    [ "$tunneldevicenew" ] && [ ! "$tunneldevice" == "$tunneldevicenew" ] && devchanged=1
    
    [ $(sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot | grep -cE "^        disable$") -eq 1 ] && disabled="on"
    [ $(sed -n "/^    openvpn $tunneldevice {$/,/^    }$/p" /config/config.boot | grep -c "config-file $openvpnconfig") -eq 1 ] && configured="on"
    
    if [ "$devchanged" ]; then
        #put new dev to config file!
        echo "Changing Tunneldevice from $tunneldevice to $tunneldevicenew" >>$log
        linenumber=$(grep -niE "dev.*$tunneldevice" $openvpnconfig | grep -viE ".*#.*dev" | awk -F: {'print $1'})
        sed -i "$linenumber""s/$tunneldevice/$tunneldevicenew/" $openvpnconfig 2>/dev/null
        if [ "$configured" ]; then
            # remove settings from old tunneldevice at first place
            configured=""
            disabled=""
            bridge=""
            resetdaemon=""
            commandlist[${#commandlist[@]}]="delete interfaces openvpn $tunneldevice"
            commandlist[${#commandlist[@]}]="commit"
        fi
    fi
    
    if [ "$tunnelenabled" == "on" ]; then
        if [ "$configured" ]; then
            [ "$disabled" ] && commandlist[${#commandlist[@]}]="delete interfaces openvpn $tunneldevice disable"
        else 
            commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew config-file $openvpnconfig"
            commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew description Tunnelserver"
        fi
    elif [ "$configured" ]; then
        [ "$disabled" ] || commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew disable"
        disabled="on"
        resetdaemon=""
    else
        commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew config-file $openvpnconfig"
        commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew description Tunnelserver"
        commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew disable"
    fi

    #now care about correct bridge
    if [ "$bridge" == "$bridgenew" ]; then
        [ "$devchanged" ] && [ "$bridgenew" ] && commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew bridge-group bridge $bridgenew"
    elif [ "$bridgenew" ]; then
        commandlist[${#commandlist[@]}]="set interfaces openvpn $tunneldevicenew bridge-group bridge $bridgenew"
    fi

    if [ ${#commandlist[@]} \> 0 ] && [ $ret == 0 ]; then
        echo "Applying script commands..." >>$log
        cmd="/opt/vyatta/sbin/vyatta-cfg-cmd-wrapper"
tfile=$(mktemp)
(
$cmd begin
ret=0
for executecmd in "${commandlist[@]}"; do
    if [ $ret == 0 ]; then
        echo "--"$executecmd >>$log
        $cmd $executecmd || ret=1
    else
        echo "--skipped: "$executecmd >>$log
    fi
done
[ $ret == 0 ] && $cmd commit || ret=1
[ $ret == 0 ] && $cmd save || ret=1
$cmd end
exit $ret
) >$tfile 2>&1
ret=$?
output=$(cat $tfile)
rm -f $tfile
echo "${output}" >> $log
    #exiting configuration all must be fine
    fi

    #reset daemon if requested from user or needed due to changes config file
    if [ "$resetdaemon" ] && [ "$runningok" ] && [ "$currentvtunprocess" ]; then
        startcommand=$(ps u --pid $currentvtunprocess | tail -1 | sed -e "s/^.*\/usr\/sbin\/openvpn /\/usr\/sbin\/openvpn /")
        if [ "$startcommand" ]; then
            echo "Resetting openvpn $tunneldevice pid $currentvtunprocess ($resetdaemon)..."  >>$log
            sudo kill $currentvtunprocess >>$log 2>>$log
            sudo rm -f /var/run/openvpn-vtun0.pid >>$log 2>>$log
            sudo $startcommand
        else
            echo "Resetting openvpn failed - process not found"  >>$log
        fi
    fi

    # for debugging purposes
    cp $INPUT /tmp/result.json

    # $ret and $output comes from port change
    if [ "$ret" == "1" ]; then
        echo "ERROR from Wizard to UI: "$output  >>$log
        echo "{\"success\":\"0\",\"error\": \"${output//\"/\'}\"}"
    else
        echo "{\"success\":\"1\"}"
    fi
}

#ubnt@wehrtest-router:/var/log$ sudo cat /tmp/result.json
#{
#    "tunnelenabled": "on",
#    "bridge": "br9",
#    "portnumber": "5101",
#    "tunneldevice": "vtun0",
#    "secretstring": "",
#    "int2dest": "eth0.1"
#}
#ubnt@wehrtest-router:/var/log$ sudo cat /tmp/result.json
#{
#    "enabled": "on",
#    "bridge": "",
#    "portnumber": "5101"
#}

case "$ACTION" in
    load)
        load
        ;;
    apply)
        apply
        ;;
esac

echo "EdgeMAX ER-wizard-0xFF-OpenVPN2TS ended $(date +%Y-%m-%d/%H:%M:%S.%N) Session="$$ >>$log
